#!/usr/bin/env python3
# ----------------------------------------------------------------------------------------
# Madame De Maintenon’s Cryptographic Pursuit – Unmasking the Traitors
#
# Challenge Solution
# ----------------------------------------------------------------------------------------
import binascii
import hashlib
import libnum
import re
import struct
import textwrap
from Crypto.Cipher import AES


# ----------------------------------------------------------------------------------------
def crack_stage1():
    """Solution to stage #1.
    There is a direct check in 0x401950:
        `memcmp("Head to the library", inp, 0x13uLL)`
    """
    return 'Head to the library'


# ----------------------------------------------------------------------------------------
def crack_stage2():
    """Solution to stage #2.

    Function at 0x402560, XORs input with constant key and compares with a target
    ciphertext. We simply XOR the key with the ciphertext to get the plaintext.

      xor_key = 0x44;
      xored_inp = ptr;
      while ( 1 ) {
        *ptr ^= xor_key;
        if ( ++ptr == &inp_end )
          break;
        xor_key = *key_buf++;
      }
    """
    trg = [
        0x07, 0x5E, 0x06, 0xAB, 0x77, 0x08, 0xE6, 0xCF, 0xE2, 0x51, 
        0x5C, 0x19, 0x98, 0x80, 0xB2, 0x3B, 0xCF, 0xB0, 0xF3, 0x02, 
        0xE4, 0xF4, 0x3B, 0xED, 0x44, 0x7F, 0xEC, 0x90, 0x9F
    ]

    key = [
        0x44, 0x36, 0x63, 0xC8, 0x1C, 0x28, 0x84, 0xA0, 0x8D, 0x3A, 
        0x2F, 0x39, 0xF7, 0xEE, 0x92, 0x4F, 0xA7, 0xD5, 0xD3, 0x6C, 
        0x81, 0x8C, 0x4F, 0xCD, 0x37, 0x17, 0x89, 0xFC, 0xF9
    ]

    res = ''.join(chr(a ^ b) for a, b in zip(trg, key))
    return res # 'Check books on the next shelf'


# ----------------------------------------------------------------------------------------
def crack_stage3():
    """Solution to stage #3.
    
    Function at 0x401300 contains a long sequence of checks.
    However, they have well defined structure, so we can use a regex to extract all
    operations and invert them.
    """
    code = textwrap.dedent('''
        _BOOL8 __fastcall u_stage_3_check_input(char *a1_inp) {
          int n_hits; // [rsp+14h] [rbp-4h]

          n_hits = (*a1_inp + 15) == 98;
          if ( (a1_inp[1] ^ 59) == 94 )
            ++n_hits;
          if ( (a1_inp[2] + 57) == 154 )
            ++n_hits;
          if ( (a1_inp[3] ^ 56) == 74 )
            ++n_hits;
          if ( (a1_inp[4] ^ 116) == 23 )
            ++n_hits;
          if ( (a1_inp[5] ^ 59) == 83 )
            ++n_hits;
          if ( (a1_inp[6] + 3) == 35 )
            ++n_hits;
          if ( (a1_inp[7] - 67) == 49 )
            ++n_hits;
          if ( (a1_inp[8] + 9) == 113 )
            ++n_hits;
          if ( (a1_inp[9] + 12) == 113 )
            ++n_hits;
          if ( (a1_inp[10] + 90) == 122 )
            ++n_hits;
          if ( (a1_inp[11] - 16) == 82 )
            ++n_hits;
          if ( (a1_inp[12] + 123) == 234 )
            ++n_hits;
          if ( (a1_inp[13] ^ 41) == 70 )
            ++n_hits;
          if ( (a1_inp[14] - 127) == 236 )
            ++n_hits;
          if ( (a1_inp[15] ^ 2) == 34 )
            ++n_hits;
          if ( (a1_inp[16] + 84) == 186 )
            ++n_hits;
          if ( (a1_inp[17] ^ 176) == 223 )
            ++n_hits;
          if ( (a1_inp[18] + 102) == 216 )
            ++n_hits;
          if ( (a1_inp[19] - 109) == 179 )
            ++n_hits;
          if ( (a1_inp[20] ^ 32) == 67 )
            ++n_hits;
          if ( (a1_inp[21] + 111) == 219 )
            ++n_hits;
          if ( (a1_inp[22] + 24) == 141 )
            ++n_hits;
          if ( (a1_inp[23] + 9) == 110 )
            ++n_hits;
          if ( (a1_inp[24] + 48) == 163 )
            ++n_hits;
          if ( (a1_inp[25] - 19) == 237 )
            ++n_hits;
          if ( (a1_inp[26] - 61) == 195 )
            ++n_hits;
          if ( (a1_inp[27] - 109) == 147 )
            ++n_hits;
          if ( (a1_inp[28] - 118) == 138 )
            ++n_hits;
          if ( (a1_inp[29] + 126) == 126 )
            ++n_hits;
          if ( (a1_inp[30] + 42) == 42 )
            ++n_hits;
          if ( (a1_inp[31] ^ 92) == 92 )
            ++n_hits;
          return n_hits == 32;
        }
        ''')
    
    plaintext = chr(98 - 15)  # First element is shown as *a1_inp so we solve it manually.
    for line in code.splitlines():
        if match := re.match(
                f'^\s*if \( \(a1_inp\[(\d+)\] (.) (\d+)\) == (\d+) \)$', line):
            i, op, n, r  = match.groups()
            iop = { '+': '-',  '-': '+', '^': '^'}[op] # Inverse operator
            plaintext += chr(eval(f'({r} {iop} {n}) & 0xFF'))
              
    # Strip everything after NULL byte.
    return plaintext.rstrip('\x00')  # 'Search the book for clues'


# ----------------------------------------------------------------------------------------
def crack_stage4(key):
    """Solution to stage #4.

    This is a simple 256 Rijndael decrypt in ECB mode. The key is the solution from the
    previous stage (#3).
    """
    ciphertext = bytes([
        0x42, 0xBC, 0x23, 0x27, 0x0F, 0xF2, 0x36, 0x8C, 0x92, 0x17, 
        0xD9, 0xEF, 0x20, 0xAE, 0xDE, 0x57, 0x5D, 0x8E, 0xA4, 0x05, 
        0xFD, 0x0C, 0xCE, 0x09, 0xEA, 0x88, 0x43, 0xFE, 0x93, 0x3A, 
        0x99, 0x02, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 
        0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 
        0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 
        0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 
        0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 
        0xB2, 0x04, 0x02, 0x20, 0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 
        0x03, 0x02, 0xFA, 0x61, 0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20, 
        0x8B, 0x76, 0x4F, 0x6B, 0x5C, 0xAF, 0x03, 0x02, 0xFA, 0x61, 
        0xAF, 0xFD, 0xB2, 0x04, 0x02, 0x20
    ])
    decryptor = AES.new(
        key=(key + '\0'*(32 - len(key))).encode('utf-8'), mode=AES.MODE_ECB)
    plaintext = decryptor.decrypt(ciphertext)

    # Strip everything after NULL byte
    return plaintext.decode('utf-8').rstrip('\x00')  # 'Turn over the page'


# ----------------------------------------------------------------------------------------
def crack_stage5():
    """Solution to stage #5.

    The same plaintext (solution to stage #1) is encrypted using RSA 3 times using 
    3 different modules N. We apply the Chinese Remainder Theorem to find P^3.
    Then we find the cubic root of the result to recover P.

    To get the values of c1, c2, c3 simply run the following command to the IDA command
    window:    
        `binascii.hexlify(bytes([ida_bytes.get_byte(0x4076A0 + i) for i in range(256)]))`

        (Don't forget to change the address 0x4076D0 for each ciphertext)
    """
    c1 = int(  # 0x4076A0
        '7d9e6b093218080a5a34349c0db3c3c986b102d98c14cda70bb241b5a838394ca'
        'bb132d9789deade34ca28a3967b77e1da56c428f40c7d601be4ae2cb98fee1b8c'
        '8dcb22eeedfc4bb6462a9c24d4fd45854d5dc04f58e5bc701b6cac9ed6d02ba05'
        'b8935c7fe26f84086cd49d0d66bcb6575aaa791f81be84768b5961f3ff105ee5e'
        'c56fcdaf46a1c7369dd4d58ecd2ce28c7abb0f35e0dc0752a11b8916969af491f'
        '6baafbffe0877fae05ba18d6daf385bccd88951d72e6b8a4ccca00fa3bf451f51'
        '2eaebf8a20baad68e04caae68b8fa1dbcbd1ae377b5cf26a7c90b6348569036d7'
        '6d838b5bcd0e6c423581265edccf32279a0b629fab0fcd485a38b4205', 16)

    c2 = int(  # 0x406DA0
        '67512e54ff9cd853ab645a69ec8f64009fad60eee84ce5d9a5db8754813d5f9c9'
        'c038da9476caf9f1b543a289613d02a4addc2948b94a965b2dce0cb93b771236a'
        '7f1cf879c86c4f9c07f26bbbd773a7d9edf6b3981e4f96f355ecdd7407506672e'
        '5025ec2c915ca1d5f35d1ccc35679aff91b833a07fc6bfad06c9acf053870e5f5'
        '2d3dc8f1757355ea4c8da81d88c37d4b68ebe50274566cb683c19cf5fa6d8851f'
        '92d9f9abd5fd0cbb67551c3fa2018555b9a2995da96443d9746399fbb86aca121'
        'fe4ebe97d8468db22a0bd087a1e3fc289c5633157bdc0bcd677faa26b1fa4be84'
        '285a408edd28e48ab47535465dce281111b0b70855cae188aa6fdaa85', 16)

    c3 = int(  # 0x4064A0
        '1b48f3de27db0a80ffa291b161ffe9ca6cee79db559c8047579920cb23c130311'
        'a366f8561ee5966ee0a72293671c3587074011759de78b837b676303c0179db6c'
        'fc6e5d883835738249bc61f8ebc6a6cade877eee27f2f74c510f9ac6c723e53f7'
        '6a8d45db5d6918cee530db1a2102781a481cd0930875b5f40c61a35e685364c5e'
        'c883bf5899238eddc22ba12cb58fcee49e943c58b13f5cd893ff4c02cdb583ea3'
        '359cd26b8360a1873498b4d650c580e5f2ea31f2472a7f8d9a5ee30237c4addc4'
        '876961ab80f2923e807dbc319d7e4aaec4c63e1402f68d9d11ff0365a70328e62'
        'aa5da8f1d1b62035381b1a05744e78ab06d1d69bfd45eb41e4e902338', 16)

    
    n1 = int(  # 0x4077A0
        '8e449627141446d50a3bfab5d9fc0d58c6b9f64630d011cb5c831c5989402de1f'
        '553ae70c9f8ddefb42f001e553fe7d852bb08cec6efebe490eb40c91955b02015'
        '9c66836a5d7d5364da7cab32deff4ea6ec1e41bdda7b7c298da68d4be77e4750b'
        'f86d5d24ed67511bb37a105bc4da0e3ec0cd4960a1ae2986fd402101061d290f2'
        '92030bcf21a38d77dbde760d01a3faaa210e34a4e471fa0eac5518d2f01faa706'
        '59f582a9e211ff6b438b0bb1abb49f4bb458acefd7bbcc8f68ed7cd121bf16ad1'
        'd5e0cd5384b4e3441de7d5ec3c10c52ed9263ffe3c6af5ba508f0b774e932dece'
        '2f84c053f972ca31a68c1cd13668db6adb3e2320c93a0b06ae1737ad9', 16)

    n2 = int(  # 0x406EA0
        '678dcc64ccf7c29ffe64838a80196bd90b2d6247e4d712cb60c6a4a3a09ac088b'
        '9d1b19518451ce1a295ca6134a65cb5176083849e11cea23cf5d6c303ee95d02f'
        '1af26f741131d03c4e86866e26b09069c0be5c718298ed1cfc01493d78520957e'
        '25c2d921f6b6518ef5ef608e209d4d9ad613fdb6a2eb4156c906c89583949ca07'
        '6312c6a258f14794ee852a61f27fe2a6b17b1ea85de3e40a2636fc4430e920ed8'
        'dc688aebdb6f5e63140f7844f3597c82704545c308a36e20eb94e00b35eaee860'
        '835c2f213956bfb79bb17d9b914524a5b133be5af4667ca0710420ca6bd90c287'
        '61ba1d52ed7d83d927245f53d45b35f2f1729ff602271abb0ebf7ce5b', 16)
    
    n3 = int(  # 0x4065A0 
        'b1b751bdef5727862c0f6bddcaa9802722b2499c760e02d7bb4c3862933919443'
        '1dbeb41a6222e01dca0fa8e792562ccc9bcf9c57549037a44eb4945daf4440ac4'
        'f4aab3bdf1566a3961c88e8cdb925870e68e9064354568335eefc62344fdac065'
        '93bdd8c4dc63c0af932f5dab986919f4acb4b602896ba1896c3d0bc00a9bd6408'
        'a85e3e8766bfd44af0ab151d3537c2b2955eebe9cbcd6871146524253e14e374c'
        'dda166e8b298932695c774ab8f8ac332a92fa49c91f65ce1a01b12e3d056990c9'
        '54a3c6fa9346a67819bbc76d9cfbebff9810841810ccfdd3a3773cc24ead32665'
        'b8e667b1b0b817f0bb3d8d7ca17342e6b2d024762e2ecbf897af9cb15', 16)

    # Do the Chinese Remainder Theorem to get P^3.
    plain_cube = libnum.solve_crt([c1, c2, c3], [n1, n2, n3])
    # Now find the 3rd root to recover plaintext.
    plaintext  = libnum.nroot(plain_cube, 3)

    return plaintext.to_bytes(256, byteorder='big').decode('utf-8').rstrip('\0')


# ----------------------------------------------------------------------------------------
if __name__ == "__main__":
    print('[+] Madame crack started.')

    s1 = crack_stage1()
    print(f'[+] Stage #1 solution: {s1!r}')
    s2 = crack_stage2()
    print(f'[+] Stage #2 solution: {s2!r}')
    s3 = crack_stage3()
    print(f'[+] Stage #3 solution: {s3!r}')
    s4 = crack_stage4(s3)
    print(f'[+] Stage #4 solution: {s4!r}')
    s5 = crack_stage5()
    print(f'[+] Stage #5 solution: {s5!r}')
    print(f'[+] This was actually the input to stage #1')

    print('[+] Decoding coordinates ...')    
    # Hint says:
    # Convert the values you found into coordinates, (hint: IEEE-754 Floating Point),
    # and send those coordinates in an email to marketing@hex-rays.com!
    # ....The md5 of the coordinates, with 4 decimal places,
    # (including potential leading zeros) in the form: xx.xxxx, yy.yyyy
    # Has an md5 of fe72f3730186f24d983a1c2ed1bc1da7 when pasted as a 16 character
    # string.
    v1 = '01000010'
    v2 = '00110111'
    v3 = '10110010'
    v4 = '00000101'
    v5 = '01000000110111000011011000000000'
 
    # We convert bitstring to int, then we pack it and we unpack it as float: 
    # We can also use an online converter:
    #       https://www.h-schmidt.net/FloatConverter/IEEE754.html
    x = struct.unpack('f', struct.pack('<L', int(v1 + v2 + v3 + v4, 2)))[0]
    y = struct.unpack('f', struct.pack('<L', int(v5, 2)))[0]
    # x = 45.92384719848633
    # y = 6.881591796875
    print(f'[+] The coordinates are: ({x}, {y})')

    coordinates = f'{x:08.5f}'[:7] + ', ' + f'{y:08.5f}'[:7]
    print(f'[+] Truncated coordinates: {coordinates!r}')

    md5 = hashlib.md5(coordinates.encode('utf-8')).hexdigest()
    print(f'[+] MD5 hash of the coordinates: {md5}')

    assert md5 == 'fe72f3730186f24d983a1c2ed1bc1da7'
    
    print('[+] Program finished. Bye bye :)')

# ----------------------------------------------------------------------------------------
r'''
┌─[22:40:24]─[ispo@ispo-glaptop2]─[~/ctf/madame]
└──> ./madame_crack.py 
[+] Madame crack started.
[+] Stage #1 solution: 'Head to the library'
[+] Stage #2 solution: 'Check books on the next shelf'
[+] Stage #3 solution: 'Search the book for clues'
[+] Stage #4 solution: 'Turn over the page'
[+] Stage #5 solution: 'Head to the library. Upon entering, politely ask the librarian if they are aware of any extra documents refering to Madame De Maintenon.'
[+] This was actually the input to stage #1
[+] Decoding coordinates ...
[+] The coordinates are: (45.92384719848633, 6.881591796875)
[+] Truncated coordinates: '45.9238, 06.8815'
[+] MD5 hash of the coordinates: fe72f3730186f24d983a1c2ed1bc1da7
[+] Program finished. Bye bye :)
'''
# ----------------------------------------------------------------------------------------

